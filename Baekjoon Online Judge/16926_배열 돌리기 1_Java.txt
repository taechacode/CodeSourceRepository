package Baekjoon;

import java.util.*;
import java.io.*;

public class Main {
	static int N, M, R;
	static int[][] array;
	
	// 우, 하, 좌, 상
	static int[] directionX = { 0, 1, 0, -1 };
	static int[] directionY = { 1, 0, -1, 0 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		StringBuilder sb = new StringBuilder("");
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		
		array = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				array[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		int s = Math.min(N, M) / 2; // 회전(탐색)하는 사각형의 갯수
		
		// 반복 횟수만큼 회전시킴
		for (int i = 0; i < R; i++) {
			rotate(s);
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				sb.append(array[i][j]).append(" ");
			}
			sb.append("\n");
		}
		System.out.print(sb);
	}

	static void rotate(int s) {
		for(int i = 0; i < s; i++) {
			int direction = 0; // 탐색 방향
			int startX = i; // 이번 회차에 탐색 시작하는 X좌표
			int startY = i; // 이번 회차에 탐색 시작하는 Y좌표
			
			int temp = array[startX][startY];
			
			while(direction < 4) {
				
				// 처음 좌표 기준으로 우, 하, 좌, 상 순의 방향으로 탐색함
				int nextX = startX + directionX[direction];
				int nextY = startY + directionY[direction]; 
				
				// 사각형을 벗어나지 않으면 계속 진행
				if(nextX >= i && nextY >= i && nextX < N - i && nextY < M - i) {
					array[startX][startY] = array[nextX][nextY];
					startX = nextX;
					startY = nextY;
				}
				
				// 계속 진행하다가 범위를 벗어나면 방향 전환
				else {
					direction++;
				}
			}
			
			// 마지막 탐색 시 처음 탐색했던 지점으로 되돌아오는데
			// 해당 지점에는 이미 처음에 array[i][i+1]의 좌표로 덮어씌어져 있으므로
			// temp에 미리 저장해두었던 array[i][i]의 좌표를 바로 밑의 좌표인
			// array[i+1][i]에 저장하여 순회를 완료함
			array[i+1][i] = temp;
		}
	}
	
}