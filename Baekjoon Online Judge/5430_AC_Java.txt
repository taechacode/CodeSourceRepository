import java.io.*;
import java.util.*;

public class Main {
    private static StringBuilder sb = new StringBuilder();
    private static void AC(String command, Deque deque) {
        boolean reverse = false;
        for(int i = 0; i < command.length(); i++) {
            if(command.charAt(i) == 'R') {
                reverse = !reverse;
            }
            else if(command.charAt(i) == 'D') {
                if(reverse == false) {
                    if(deque.isEmpty()) {
                        sb.append("error\n");
                        return;
                    }
                    deque.removeFirst();
                }
                else if(reverse == true) {
                    if(deque.isEmpty()) {
                        sb.append("error\n");
                        return;
                    }
                    deque.removeLast();
                }
            }
        }
        makeString(deque, reverse);
    }

    private static void makeString(Deque deque, boolean reverse) {
        sb.append("[");
        if(reverse == false && !deque.isEmpty()) {
            sb.append(deque.pollFirst());
            while(!deque.isEmpty()) {
                sb.append(",").append(deque.pollFirst());
            }
        }
        else if(reverse == true && !deque.isEmpty()) {
            sb.append(deque.pollLast());
            while(!deque.isEmpty()) {
                sb.append(",").append(deque.pollLast());
            }
        }
        sb.append("]").append("\n");
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.valueOf(br.readLine());
        StringTokenizer st;
        while(T-- > 0) {
            String command = br.readLine();
            int n = Integer.valueOf(br.readLine());
            st = new StringTokenizer(br.readLine(), "[],");
            Deque<String> deque = new ArrayDeque<>();
            for(int i = 0; i < n; i++) {
                deque.add(st.nextToken());
            }
            AC(command, deque);
        }
        System.out.println(sb);
    }
}