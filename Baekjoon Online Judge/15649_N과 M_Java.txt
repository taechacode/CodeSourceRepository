package Baekjoon;

import java.util.*;
import java.io.*;

public class Main {	
	static BufferedReader br;
	static int[] arr;
	static boolean[] visit;
	static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		// N개 중에 M개를 순서를 고려해서 고르기
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		
		arr = new int[M];
		visit = new boolean[N];
		
		permutation(N, M, 0);
	}
	
	public static void permutation(int N, int M, int position) {
		
		// 탐색하기로 한 자리 수 M과 현재 탐색하고 있는 자리의 순서가 같아지면
		// 마지막 탐색 순서에 도달했다는 의미이므로 현재까지 순열을 저장해놓은
		// arr을 모두 출력하고 메소드 종료
		if(position == M) {
			for(int num : arr) {
				System.out.print(num + " ");
			}
			System.out.println();
			return;
		}
		
		// 입력받은 모든 수를 현재 자리에 넣어보기
		for(int i = 0; i < N; i++) {
			
			// 만약 현재 자리를 방문하지 않았었다면
			if(visit[i] == false) {
				
				visit[i] = true; // 해당 i를 방문상태로 체크
				arr[position] = i + 1; // 해당 자리를 index로 하여 i+1 저장 (반복문이 0부터 시작)
				permutation(N, M, position + 1); // 다음 자리 방문을 위하여 자리(position)수를 1 증가시키면서 재귀호출
				
				// 다음 자리 방문이 끝나고 돌아오면 현재 자리를 방문하지 않은 상태로 변경
				// 이유는? 다음 첫번째 자리가 1이 아닌 2가 들어가는 것처럼 다른 숫자가 들어갈 경우를 계산하기 위해서
				visit[i] = false;
			}
		}
		return;
	}
}